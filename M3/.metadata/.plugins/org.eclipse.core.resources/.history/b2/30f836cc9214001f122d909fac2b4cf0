package gui;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import interfaces.Variables;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class ArmyUpgradeApp {

    private static int resources = 1000;
    private static int multiplier = 1; // Variable para el multiplicador de costos


    public static void main(String[] args) {
        JFrame frame = new JFrame("Army and Technology Upgrade");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1700, 1000);

        JTabbedPane tabbedPane = new JTabbedPane();

        // Upgrade Army tab
        JPanel upgradeArmyPanel = new JPanel();
        upgradeArmyPanel.setLayout(new GridLayout(3, 3));

        String[] soldierNames = {"Swordsman", "Spearman", "Crossbow", "Cannon", "Arrow Tower", "Catapult", "Rocket Launcher Tower", "Magician", "Priest"};
        String[] soldierImages = {"./src/gui/unit_assets/swordsman.png", "./src/gui/unit_assets/spearman.png", "./src/gui/unit_assets/crossbow.png", "./src/gui/unit_assets/cannon.png", "./src/gui/unit_assets/arrow_tower.png", "./src/gui/unit_assets/catapult.png", "./src/gui/unit_assets/rocket_launcher.png", "./src/gui/unit_assets/magician.png", "./src/gui/unit_assets/priest.png"};

        int[][] soldierCosts = {
                {Variables.FOOD_COST_SWORDSMAN, Variables.WOOD_COST_SWORDSMAN, Variables.IRON_COST_SWORDSMAN, Variables.MANA_COST_SWORDSMAN},
                {Variables.FOOD_COST_SPEARMAN, Variables.WOOD_COST_SPEARMAN, Variables.IRON_COST_SPEARMAN, Variables.MANA_COST_SPEARMAN},
                {Variables.FOOD_COST_CROSSBOW, Variables.WOOD_COST_CROSSBOW, Variables.IRON_COST_CROSSBOW, Variables.MANA_COST_CROSSBOW},
                {Variables.FOOD_COST_CANNON, Variables.WOOD_COST_CANNON, Variables.IRON_COST_CANNON, Variables.MANA_COST_CANNON},
                {Variables.FOOD_COST_ARROWTOWER, Variables.WOOD_COST_ARROWTOWER, Variables.IRON_COST_ARROWTOWER, Variables.MANA_COST_ARROWTOWER},
                {Variables.FOOD_COST_CATAPULT, Variables.WOOD_COST_CATAPULT, Variables.IRON_COST_CATAPULT, Variables.MANA_COST_CATAPULT},
                {Variables.FOOD_COST_ROCKETLAUNCHERTOWER, Variables.WOOD_COST_ROCKETLAUNCHERTOWER, Variables.IRON_COST_ROCKETLAUNCHERTOWER, Variables.MANA_COST_ROCKETLAUNCHERTOWER},
                {Variables.FOOD_COST_MAGICIAN, Variables.WOOD_COST_MAGICIAN, Variables.IRON_COST_MAGICIAN, Variables.MANA_COST_MAGICIAN},
                {Variables.FOOD_COST_PRIEST, Variables.WOOD_COST_PRIEST, Variables.IRON_COST_PRIEST, Variables.MANA_COST_PRIEST}
        };

        for (int i = 0; i < soldierNames.length; i++) {
            upgradeArmyPanel.add(createSoldierPanel(soldierNames[i], soldierCosts[i], soldierImages[i]));
        }

        // Upgrade Technology tab
        JPanel upgradeTechnologyPanel = new JPanel(new BorderLayout());

        // Título centrado
        JLabel mainTitle = new JLabel("Tecnología", JLabel.CENTER);
        mainTitle.setFont(new Font("Arial", Font.BOLD, 24));
        mainTitle.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0)); // Margen superior e inferior
        upgradeTechnologyPanel.add(mainTitle, BorderLayout.NORTH);

        // Panel para Upgrade Attack Technology
        JPanel attackPanel = new JPanel(new BorderLayout());
        JLabel attackTitle = new JLabel("Upgrade Attack Technology");
        attackTitle.setFont(new Font("Arial", Font.BOLD, 20));
        attackTitle.setHorizontalAlignment(JLabel.CENTER);
        attackTitle.setBorder(BorderFactory.createEmptyBorder(20, 0, 0, 0)); // Margen superior
        attackPanel.add(attackTitle, BorderLayout.NORTH);

        // Agrega una imagen en el centro
        JLabel attackImage = new JLabel();
        attackImage.setIcon(new ImageIcon("./src/gui/sword.png"));
        attackImage.setHorizontalAlignment(JLabel.CENTER);
        attackPanel.add(attackImage, BorderLayout.CENTER);

        // Panel para el spinner y el botón
        JPanel attackBottomPanel = new JPanel(new BorderLayout());

        // Nivel de tecnología actual
        JLabel currentLevelLabel = new JLabel("Nivel de Tecnología Actual: 1", JLabel.CENTER);
        attackBottomPanel.add(currentLevelLabel, BorderLayout.NORTH);

        // Panel intermedio para el spinner y el botón con FlowLayout
        JPanel spinnerButtonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        
        // Agrega un JSpinner y un botón Upgrade
        JSpinner levelSpinner = new JSpinner(new SpinnerNumberModel(1, 1, 99, 1));
        levelSpinner.setPreferredSize(new Dimension(60, 30));
        levelSpinner.addChangeListener(e -> {
            int value = (int) levelSpinner.getValue();
            currentLevelLabel.setText("Nivel de Tecnología Actual: " + value);
        });
        spinnerButtonPanel.add(levelSpinner);

        JButton upgradeButton = new JButton("Upgrade");
        spinnerButtonPanel.add(upgradeButton);

        attackBottomPanel.add(spinnerButtonPanel, BorderLayout.CENTER);

        attackPanel.add(attackBottomPanel, BorderLayout.SOUTH);

        // Agrega el panel al upgradeTechnologyPanel
        upgradeTechnologyPanel.add(attackPanel, BorderLayout.WEST);

        // Panel para Upgrade Defense Technology
        JPanel defensePanel = new JPanel(new BorderLayout());
        JLabel defenseTitle = new JLabel("Upgrade Defense Technology");
        defenseTitle.setFont(new Font("Arial", Font.BOLD, 20));
        defenseTitle.setHorizontalAlignment(JLabel.CENTER);
        defenseTitle.setBorder(BorderFactory.createEmptyBorder(20, 0, 0, 0)); // Margen superior
        defensePanel.add(defenseTitle, BorderLayout.NORTH);

        // Agrega una imagen en el centro
        JLabel defenseImage = new JLabel();
        defenseImage.setIcon(new ImageIcon(resizeImage("./src/gui/shield.png", 300, 300)));
        defenseImage.setHorizontalAlignment(JLabel.CENTER);
        defensePanel.add(defenseImage, BorderLayout.CENTER);

        // Panel para el spinner y el botón
        JPanel defenseBottomPanel = new JPanel(new BorderLayout());

        // Nivel de tecnología actual
        JLabel currentLevelLabelDefense = new JLabel("Nivel de Tecnología Actual: 1", JLabel.CENTER);
        defenseBottomPanel.add(currentLevelLabelDefense, BorderLayout.NORTH);

        // Panel intermedio para el spinner y el botón con FlowLayout
        JPanel spinnerButtonPanelDefense = new JPanel(new FlowLayout(FlowLayout.CENTER));

        // Agrega un JSpinner y un botón Upgrade
        JSpinner leveltSpinner = new JSpinner(new SpinnerNumberModel(1, 1, 99, 1));
        leveltSpinner.setPreferredSize(new Dimension(60, 30));
        leveltSpinner.addChangeListener(e -> {
            int value = (int) leveltSpinner.getValue();
            currentLevelLabelDefense.setText("Nivel de Tecnología Actual: " + value);
        });
        spinnerButtonPanelDefense.add(leveltSpinner);

        JButton upgradeButton1 = new JButton("Upgrade");
        spinnerButtonPanelDefense.add(upgradeButton1);

        defenseBottomPanel.add(spinnerButtonPanelDefense, BorderLayout.CENTER);

        defensePanel.add(defenseBottomPanel, BorderLayout.SOUTH);

        // Agrega el panel al upgradeTechnologyPanel
        upgradeTechnologyPanel.add(defensePanel, BorderLayout.EAST);

        // Agrega el panel al tabbedPane
        tabbedPane.add("Upgrade Army", upgradeArmyPanel);
        tabbedPane.add("Upgrade Technology", upgradeTechnologyPanel);

        frame.add(tabbedPane);
        frame.setVisible(true);
    }
    
    // Método para redimensionar una imagen
    private static Image resizeImage(String imagePath, int width, int height) {
        try {
            BufferedImage originalImage = ImageIO.read(new File(imagePath));
            Image resizedImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return resizedImage;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }


    private static JPanel createSoldierPanel(String soldierName, int[] costs, String imagePath) {
        JPanel panel = new BackgroundPanel();

        // Creamos un JPanel interno para contener la imagen y lo configuramos con FlowLayout centrado
        JPanel imagePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        imagePanel.setOpaque(false);

        JLabel imageLabel = new JLabel();
        ImageIcon soldierIcon = new ImageIcon(imagePath);
        Image scaledImage = soldierIcon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);
        soldierIcon = new ImageIcon(scaledImage);
        imageLabel.setIcon(soldierIcon);

        // Agregamos el JLabel al JPanel interno
        imagePanel.add(imageLabel);

        // Agregamos el JPanel interno al JPanel principal con BorderLayout.NORTH
        panel.add(imagePanel, BorderLayout.NORTH);

        JPanel costPanel = new JPanel();
        costPanel.setLayout(new GridLayout(1, 4));
        costPanel.setOpaque(false);

        Font fuente = new Font("Arial", Font.PLAIN, 20);

        JLabel foodLabel = new JLabel("Food: " + costs[0]);
        JLabel woodLabel = new JLabel("Wood: " + costs[1]);
        JLabel ironLabel = new JLabel("Iron: " + costs[2]);
        JLabel manaLabel = new JLabel("Mana: " + costs[3]);
        
        foodLabel.setForeground(Color.white);
        woodLabel.setForeground(Color.white);
        ironLabel.setForeground(Color.white);
        manaLabel.setForeground(Color.white);


        foodLabel.setFont(fuente);
        woodLabel.setFont(fuente);
        ironLabel.setFont(fuente);
        manaLabel.setFont(fuente);

        costPanel.add(foodLabel);
        costPanel.add(woodLabel);
        costPanel.add(ironLabel);
        costPanel.add(manaLabel);

        panel.add(costPanel, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout());

        JLabel nameLabel = new JLabel(soldierName + " units to create");
        nameLabel.setForeground(Color.white);

        nameLabel.setFont(fuente);

        bottomPanel.setPreferredSize(new Dimension(500,100));
        bottomPanel.add(nameLabel);
        bottomPanel.setOpaque(false);

        SpinnerNumberModel numberModel = new SpinnerNumberModel(1, 1, 5, 1);
        JSpinner unitSelector = new JSpinner(numberModel);
        unitSelector.setPreferredSize(new Dimension(50,30));
        unitSelector.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int value = (int) unitSelector.getValue();
                foodLabel.setText("Food: " + costs[0] * value);
                woodLabel.setText("Wood: " + costs[1] * value);
                ironLabel.setText("Iron: " + costs[2] * value);
                manaLabel.setText("Mana: " + costs[3] * value);
            }
        });
        bottomPanel.add(unitSelector);

        JButton createButton = new JButton("Create");
        createButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int units = (int) unitSelector.getValue();
                int foodCost = costs[0] * units;
                int woodCost = costs[1] * units;
                int ironCost = costs[2] * units;
                int manaCost = costs[3] * units;

                if (resources >= foodCost && resources >= woodCost && resources >= ironCost && resources >= manaCost) {
                    resources -= foodCost;
                    resources -= woodCost;
                    resources -= ironCost;
                    resources -= manaCost;
                    JOptionPane.showMessageDialog(panel,
                            "You've created " + units + " units of " + soldierName + ".\nCost: " + (foodCost + woodCost + ironCost + manaCost) + "\nRemaining Resources: " + resources,
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(panel,
                            "Not enough resources.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        bottomPanel.add(createButton);
        panel.add(bottomPanel, BorderLayout.SOUTH);

        panel.setOpaque(false);

        return panel;
    }
    
    
    
    
    private static class BackgroundPanel extends JPanel {
        private BufferedImage backgroundImage;

        public BackgroundPanel() {
            try {
                backgroundImage = ImageIO.read(new File("./src/gui/panel_background_img.jpg"));
                this.repaint();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public BackgroundPanel(BorderLayout borderLayout) {
        	super(borderLayout);
            try {
                backgroundImage = ImageIO.read(new File("./src/gui/panel_background_img.jpg"));
                this.repaint();
            } catch (IOException e) {
                e.printStackTrace();
            }
		}

		@Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (backgroundImage != null) {
                // Dibujar la imagen de fondo
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            }
        }
    }
    
    
    
}

