package gui;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import gui.Game_gui.MiPanelito;
import interfaces.GameGuiListener;
import interfaces.MainMenuListener;
import utils.dc_database;

public class dc_gui  {
    private int food, wood, iron, mana;
    private dc_database dc_database;
    private Game_gui gameGui;
    private MainMenu mainMenu;
    private JFrame mainMenuFrame;
    private MainMenuListener mmi;
    private GameGuiListener ggl = new GameGuiListener() {
		
		@Override
		public void load_game_gui() {
			System.out.println("Actualizamos paneles");
			update_panels();
			
		}
	};
    
    


    public dc_gui() {
        super();


    	mmi = new MainMenuListener() {
			
			@Override
			public void onMainMenuClosed() {
		        mainMenuFrame.dispose(); // Dispose of the main menu frame
		        invoke_game_gui();				
			}
		};
		

        this.dc_database = new dc_database();
        this.food = dc_database.getFood();
        this.wood = dc_database.getWood();
        this.mana = dc_database.getMana();
        this.iron = dc_database.getIron();
    }


    // Método para invocar el menú principal
    public void invoke_main_menu() {
        mainMenu = new MainMenu();
        mainMenu.setMainMenuListener(mmi);
        mainMenuFrame = new JFrame("Main Menu");
        mainMenuFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainMenuFrame.add(mainMenu);
        mainMenuFrame.pack();
        mainMenuFrame.setLocationRelativeTo(null);
        mainMenuFrame.setVisible(true);
    }

    // Método para invocar la GUI del juego
    public void invoke_game_gui() {
        if (gameGui == null) {
            gameGui = new Game_gui();
        }
        
        // Verifica si el GameGuiListener es null y, si lo es, crea una nueva instancia
        if (gameGui.getListener() == null) {
            gameGui.setListener(new GameGuiListener() {
                @Override
                public void load_game_gui() {
                    System.out.println("Actualizamos paneles");
                    update_panels();
                }
            });
        }

        JFrame frame = new JFrame("Game GUI");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(gameGui, BorderLayout.CENTER);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }


    
    
    
    
    //metodos actualizar recursos en db

    public void updateFood(int newFoodValue) {
        this.food = newFoodValue;
        dc_database.updateResource("food", newFoodValue);
    }
    public void updateWood(int newFoodValue) {
        this.wood = newFoodValue;
        dc_database.updateResource("wood", newFoodValue);
    }
    public void updateIron(int newFoodValue) {
        this.iron = newFoodValue;
        dc_database.updateResource("iron", newFoodValue);
    }
    public void updateMana(int newFoodValue) {
        this.mana = newFoodValue;
        dc_database.updateResource("mana", newFoodValue);
    }
    
    
    //metodo para actualizar casillas en base de datos
    
    public void update_panels() {
    	//aqui accederemos a la base de datos, iteraremos sobre todos los paneles y accederemos
    	// a gamegui para actualizarlos
    	
        MiPanelito[][] subPanels = gameGui.getSubPanels(); // Obtener la matriz de subpaneles

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String url = "jdbc:mysql://localhost/civilizationewe?serverTimezone=UTC&autoReconnect=true&useSSL=false";
        String user = "root";
        String pass = "P@ssw0rd";
        String[] structureList = new String[]{"farm", "smithy", "church", "magic_tower", "carpentry"};

        try {
            // Conexión a la base de datos
            connection = DriverManager.getConnection(url, user, pass);

            // Consulta SQL para seleccionar todos los paneles con is_occupied = true
            String query = "SELECT structure_type FROM panels WHERE is_occupied = true";
            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            // Iterar sobre los resultados
            while (resultSet.next()) {
            	//obtenemos datos de la base de datos
                // Obtener el nombre de la estructura de la fila actual
                String structureType = resultSet.getString("structure_type");
                
                // Obtener el valor de is_occupied (un booleano)
                boolean isOccupied = resultSet.getBoolean("is_occupied");
                
                // Obtener las posiciones x e y
                int xPosition = resultSet.getInt("x_position");
                int yPosition = resultSet.getInt("y_position");
                //comprobamos si el panel esta ocupado
                
                int position = -1; // Inicializamos en -1 para indicar que no se encontró el elemento

                // Iterar sobre el array y buscar el elemento
                for (int i = 0; i < structureList.length; i++) {
                    if (structureList[i].equals(structureType)) {
                        position = i; // Almacenar la posición del elemento encontrado
                        break; // Salir del bucle una vez que se ha encontrado el elemento
                    }
                }
                
                
                if (isOccupied) {
                	subPanels[yPosition][xPosition].setCurrentImage(subPanels[yPosition][xPosition].getBuildingImages()[position]);
                	subPanels[yPosition][xPosition].repaint();
                }else {
                	System.out.println("Structure isnt occupied");
                }


            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Cerrar la conexión y los recursos
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        }
    
    
    
    

	public int getFood() {
		return food;
	}

	public void setFood(int food) {
		this.food = food;
	}

	public int getWood() {
		return wood;
	}

	public void setWood(int wood) {
		this.wood = wood;
	}

	public int getIron() {
		return iron;
	}

	public void setIron(int iron) {
		this.iron = iron;
	}

	public int getMana() {
		return mana;
	}

	public void setMana(int mana) {
		this.mana = mana;
	}






	



	
	
	
	
	

}
